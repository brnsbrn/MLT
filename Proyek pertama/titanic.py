# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18SXJow19DEuw8HrVMGnd7jaCTgpgGdOe

# Mengimpor Modul dan Mengunduh Dataset

Mengimpor Modul yang akan digunakan
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""Mengunduh Dataset menggunakan file kredensial kaggle.json"""

!chmod 600 /content/kaggle.json

!KAGGLE_CONFIG_DIR=/content/ kaggle competitions download -c titanic

"""Ekstrak File Zip Dataset"""

import zipfile, os
local_zip = '/content/titanic.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""Membaca Dataset """

data_train = pd.read_csv('/content/train.csv')
data_test = pd.read_csv('/content/test.csv')
data_train.head()

data_train.shape

data_train.describe()

data_train.info()

"""# Exploratory Data Analysis

## Univariate Analysis

Visualisasi Data Fitur Kategorikal
"""

#  Grafik Jumlah Survived
sns.countplot(data_train['Survived'])

# Grafik jumlah Pclass
sns.countplot(data_train['Pclass'])

# Grafik jumlah jenis kelamin
sns.countplot(data_train['Sex'])

# Grafik jumlah SibSp
sns.countplot(data_train['SibSp'])

# Grafik jumlah Parch
sns.countplot(data_train['Parch'])

# Grafik Jumlah Embarked
sns.countplot(data_train['Embarked'])

"""Visualisasi Data Fitur Numerikal"""

# Plot Age
sns.displot(data_train['Age'])

# Plot Fare
sns.displot(data_train['Fare'])

"""## Multivariate Analysis

### Membuat Group Barchart
"""

def group_barchart(column):
  survived = data_train.groupby(['Survived', column]).count()['PassengerId'].reset_index()
  g = sns.catplot(
      data = survived, kind = 'bar',
      x = 'Survived', y = 'PassengerId', hue = column,
      height = 6
  )

group_barchart('Sex')

group_barchart('Pclass')

group_barchart('Embarked')

"""Membuat Heatmap Fitur Numerikal"""

corr_matix = titanic.corr()
plt.figure(figsize=(15,9))
sns.heatmap(corr_matix, annot=True, cmap='coolwarm')

"""# Preprocessing Data

## Menggabungkan dataframe dan Mengisi Missing Values

Gabungkan dua dataframe Train dan Test menjadi satu
"""

train_len = len(data_train)
titanic = pd.concat([data_train, data_test], axis=0)
titanic = titanic.reset_index(drop=True)
titanic.head()

titanic.tail()

"""Menemukan dan mengatasi Missing Values:"""

titanic.isnull().sum()

"""Drop kolom Cabin karena terdapat banyak Missing Values"""

titanic = titanic.drop(columns=['Cabin'], axis=1)

"""Mengisi Missing Values dengan menggunakan nilai mean dari kolom tersebut (Untuk Fitur Numerikal)"""

# Kolom Age
titanic['Age'] = titanic['Age'].fillna(titanic['Age'].mean())
# Kolom Fare
titanic['Fare'] = titanic['Fare'].fillna(titanic['Fare'].mean())

"""Mengisi Missing Value di kolom Embarked menggunakan modus dari kolom tersebut (Karena Fitur Kategorikal)"""

titanic['Embarked'] = titanic['Embarked'].fillna(titanic['Embarked'].mode()[0])

"""Membuat Log Transformation untuk Uniform Data Distribution"""

sns.displot(titanic['Fare'])

titanic['Fare'] = np.log(titanic['Fare']+1)

sns.displot(titanic['Fare'])

"""Membuat Heatmap Korelasi Matriks"""

corr_matix = titanic.corr()
plt.figure(figsize=(15,9))
sns.heatmap(corr_matix, annot=True, cmap='coolwarm')

"""Drop Kolom yang tidak tidak dibutuhkan"""

titanic = titanic.drop(columns=['Name', 'Ticket'], axis=1)
titanic.head()

"""## Membuat Encoding untuk Fitur Kategorikal

Membuat label encoding untuk fitur Sex dan Embarked
"""

from sklearn.preprocessing import LabelEncoder
encode_ftrs = ['Sex', 'Embarked']
label = LabelEncoder()

for i in encode_ftrs:
  titanic[i] = label.fit_transform(titanic[i])
titanic.head()

"""## Train Test Split

Bagi data menjadi Data Train dan Data Test
"""

data_train = titanic.iloc[:train_len, :]
data_test = titanic.iloc[train_len:, :]

data_train.head()

data_test.head()

"""Drop kolom yang tidak diperlukan"""

X = data_train.drop(columns=['PassengerId', 'Survived'], axis=1)
y = data_train['Survived']

X.head()

"""Melatih Model"""

from sklearn.model_selection import train_test_split, cross_val_score

def classify(model):
    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
    model.fit(x_train, y_train)
    print('Accuracy:', model.score(x_test, y_test))
    
    score = cross_val_score(model, X, y, cv=5)
    print('CV Score:', np.mean(score))

"""# Modelling

Model Logistic Regression
"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
classify(model)

"""Model Random Forest"""

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
classify(model)

"""Model LGBM Classifier"""

from lightgbm import LGBMClassifier
model = LGBMClassifier()
classify(model)

"""# Melatih Data Menggunakan Model LGBM Classifier"""

model = LGBMClassifier()
model.fit(X, y)

data_test.head()

"""Drop kolom yang tidak diperlukan pada dataframe Test"""

X_test = data_test.drop(columns=['PassengerId', 'Survived'], axis=1)

X_test.head()

"""Menampilkan matriks prediksi dari data test"""

predict = model.predict(X_test)
predict

"""Test Model pada data frame submission"""

testing = pd.read_csv('/content/gender_submission.csv')
testing.head()

"""Menampilkan dataframe hasil prediksi"""

testing['Survived'] = predict
testing['Survived'] = testing['Survived'].astype('int')

testing